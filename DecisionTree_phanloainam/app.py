import pickle
from flask import Flask, render_template, request

app = Flask(__name__)

# ------------------------
# Load model
# ------------------------
with open("mushroom_model.pkl", "rb") as f:
    tree = pickle.load(f)

def predict(tree, sample):
    if not isinstance(tree, dict):
        return tree
    feature = next(iter(tree))
    value = sample.get(feature, None)
    if value in tree[feature]:
        return predict(tree[feature][value], sample)
    else:
        return "Kh√¥ng x√°c ƒë·ªãnh"

# ------------------------
# Danh s√°ch gi√° tr·ªã
# ------------------------
odor_values = {
    "a": "a - h·∫°nh nh√¢n (almond)",
    "l": "l - h·ªìi (anise)",
    "c": "c - creosote (nh·ª±a g·ªó)",
    "y": "y - c√° (fishy)",
    "f": "f - h√¥i (foul)",
    "m": "m - m·ªëc (musty)",
    "n": "n - kh√¥ng m√πi (none)",
    "p": "p - cay (pungent)",
    "s": "s - cay n·ªìng (spicy)"
}

cap_color_values = {
    "n": "n - n√¢u (brown)",
    "b": "b - be (buff)",
    "c": "c - qu·∫ø (cinnamon)",
    "g": "g - x√°m (gray)",
    "r": "r - xanh l·ª•c (green)",
    "p": "p - h·ªìng (pink)",
    "u": "u - t√≠m (purple)",
    "e": "e - ƒë·ªè (red)",
    "w": "w - tr·∫Øng (white)",
    "y": "y - v√†ng (yellow)"
}

gill_color_values = {
    "k": "k - ƒëen (black)",
    "n": "n - n√¢u (brown)",
    "b": "b - be (buff)",
    "h": "h - chocolate",
    "g": "g - x√°m (gray)",
    "r": "r - xanh l·ª•c (green)",
    "o": "o - cam (orange)",
    "p": "p - h·ªìng (pink)",
    "u": "u - t√≠m (purple)",
    "e": "e - ƒë·ªè (red)",
    "w": "w - tr·∫Øng (white)",
    "y": "y - v√†ng (yellow)"
}

@app.route('/')
def home():
    return render_template('index.html', odor_values=odor_values, cap_color_values=cap_color_values, gill_color_values=gill_color_values)

@app.route('/predict', methods=['POST'])
def predict_web():
    sample = {
        "odor": request.form['odor'],
        "cap-color": request.form['cap-color'],
        "gill-color": request.form['gill-color'],
    }

    prediction = predict(tree, sample)

    if prediction == "e":
        result = "üçÑ N·∫•m ƒÉn ƒë∆∞·ª£c (Edible)"
    elif prediction == "p":
        result = "‚ò†Ô∏è N·∫•m ƒë·ªôc (Poisonous)"
    else:
        result = "‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c"
        
    return render_template('result.html', result=result)

if __name__ == '__main__':
    app.run(debug=True)
